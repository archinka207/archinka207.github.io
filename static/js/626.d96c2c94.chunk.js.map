{"version":3,"file":"static/js/626.d96c2c94.chunk.js","mappings":"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","sources":["components/profile/ProfileEditForm.js","pages/ProfilePage.js","services/interestService.js","../node_modules/react-bootstrap/esm/Badge.js","components/common/AlertMessage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Button, Spinner, Alert, Row, Col, FloatingLabel, Card } from 'react-bootstrap';\nimport { getAllInterests as fetchAllInterestsApi } from '../../services/interestService'; // Сервис для загрузки интересов\n\nconst ProfileEditForm = ({ initialData, onSubmit, onCancel, loading, serverError }) => {\n  const [nickname, setNickname] = useState(initialData.nickname || '');\n  // Используем Set для удобного управления ID выбранных интересов\n  const [selectedInterestIds, setSelectedInterestIds] = useState(new Set(initialData.interestIds || []));\n  const [availableInterests, setAvailableInterests] = useState([]);\n  const [formError, setFormError] = useState(''); // Ошибки валидации на стороне клиента\n  const [interestsLoading, setInterestsLoading] = useState(true); // Загрузка списка интересов\n\n  useEffect(() => {\n    // Устанавливаем никнейм из initialData при монтировании или изменении initialData\n    setNickname(initialData.nickname || '');\n    setSelectedInterestIds(new Set(initialData.interestIds || []));\n  }, [initialData]); // Зависимость от initialData\n\n  useEffect(() => {\n    // Загрузка списка всех доступных интересов при монтировании компонента\n    const loadInterests = async () => {\n      setInterestsLoading(true);\n      setFormError(''); // Сбрасываем ошибки при перезагрузке\n      try {\n        const interests = await fetchAllInterestsApi();\n        setAvailableInterests(interests || []);\n      } catch (err) {\n        console.error(\"Failed to load interests for profile form:\", err);\n        setFormError(\"Could not load available interests. Please try again later.\");\n      } finally {\n        setInterestsLoading(false);\n      }\n    };\n    loadInterests();\n  }, []); // Пустой массив зависимостей - запускается один раз при монтировании\n\n  // Обработчик изменения состояния чекбокса интереса\n  const handleInterestChange = (interestId) => {\n    const newSelectedIds = new Set(selectedInterestIds);\n    if (newSelectedIds.has(interestId)) {\n      newSelectedIds.delete(interestId);\n    } else {\n      newSelectedIds.add(interestId);\n    }\n    setSelectedInterestIds(newSelectedIds);\n  };\n\n  // Обработчик отправки формы\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setFormError(''); // Сбрасываем предыдущие ошибки валидации\n\n    // Клиентская валидация\n    if (!nickname.trim()) {\n      setFormError(\"Nickname cannot be empty.\");\n      return;\n    }\n    if (nickname.trim().length < 3 || nickname.trim().length > 50) {\n      setFormError(\"Nickname must be between 3 and 50 characters.\");\n      return;\n    }\n    // Можно добавить другие валидации, например, на количество выбранных интересов\n\n    // Вызываем колбэк onSubmit, переданный из родительского компонента\n    onSubmit({\n      nickname: nickname.trim(),\n      interestIds: Array.from(selectedInterestIds), // Преобразуем Set в массив для отправки на сервер\n    });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {/* Отображение ошибок валидации или серверных ошибок */}\n      {formError && <Alert variant=\"warning\" size=\"sm\" className=\"mb-3 py-1\">{formError}</Alert>}\n      {serverError && <Alert variant=\"danger\" size=\"sm\" className=\"mb-3 py-1\">{serverError}</Alert>}\n\n      <FloatingLabel controlId=\"profileEditNickname\" label=\"Nickname\" className=\"mb-4\">\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter your new nickname\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          required\n          disabled={loading} // Блокируем во время общей загрузки (отправки формы)\n          minLength={3}\n          maxLength={50}\n        />\n      </FloatingLabel>\n\n      <Form.Group className=\"mb-4\">\n        <Form.Label as=\"h5\" className=\"mb-3\">Select Your Interests</Form.Label>\n        {interestsLoading ? (\n          <div className=\"text-center my-3\">\n            <Spinner animation=\"border\" size=\"sm\" />\n            <span className=\"ms-2\">Loading interests...</span>\n          </div>\n        ) : availableInterests.length > 0 ? (\n          <Card> {/* Обертка для лучшего визуального разделения */}\n            <Card.Body style={{ maxHeight: '300px', overflowY: 'auto' }}> {/* Ограничение высоты и скролл */}\n              <Row xs={1} md={2} className=\"g-2\"> {/* Адаптивные колонки для чекбоксов */}\n                {availableInterests.map((interest) => (\n                  <Col key={interest.id}>\n                    <Form.Check\n                      type=\"checkbox\"\n                      id={`interest-edit-${interest.id}`}\n                      label={interest.name}\n                      checked={selectedInterestIds.has(interest.id)}\n                      onChange={() => handleInterestChange(interest.id)}\n                      disabled={loading} // Блокируем во время общей загрузки\n                      className=\"mb-2\"\n                    />\n                  </Col>\n                ))}\n              </Row>\n            </Card.Body>\n          </Card>\n        ) : (\n          <p className=\"text-muted\">No interests available to select at the moment.</p>\n        )}\n      </Form.Group>\n\n      <div className=\"d-flex justify-content-end mt-4 pt-3 border-top\">\n        <Button variant=\"outline-secondary\" onClick={onCancel} disabled={loading} className=\"me-2\">\n          Cancel\n        </Button>\n        <Button variant=\"primary\" type=\"submit\" disabled={loading || interestsLoading}>\n          {loading ? (\n            <>\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n              <span className=\"ms-1\">Saving...</span>\n            </>\n          ) : (\n            'Save Changes'\n          )}\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default ProfileEditForm;","import React, { useState, useEffect, useCallback } from 'react';\nimport AlertMessage from '../components/common/AlertMessage';\nimport { useAuth } from '../hooks/useAuth'; // Кастомный хук для AuthContext\nimport ProfileEditForm from '../components/profile/ProfileEditForm'; // Форма редактирования\nimport { getUserProfile, updateUserProfile, updateUserAvatar as updateUserAvatarApi } from '../services/userService'; // API сервисы\nimport { Badge, Container, Row, Col, Card, Image, Alert, Button, Spinner, Form } from 'react-bootstrap'; // Компоненты Bootstrap\nimport defaultAvatar from '../assets/images/default-avatar.png'; // Аватар по умолчанию\nimport { getFullImageUrl } from '../utils/helpers'; // Вспомогательная функция для URL изображений\nimport { FullPageSpinner } from '../components/common/LoadingSpinner'; // Полноэкранный спиннер\nimport { Link } from 'react-router-dom'; // Для ссылки на главную страницу\n\nconst ProfilePage = () => {\n  const { currentUser, updateUserContext, loading: authLoading } = useAuth(); // Используем authLoading из AuthContext\n  const [profileData, setProfileData] = useState(null);\n  const [pageLoading, setPageLoading] = useState(true); // Отдельное состояние загрузки для страницы профиля\n  const [error, setError] = useState('');\n  const [editMode, setEditMode] = useState(false); // Режим редактирования профиля\n  const [avatarFile, setAvatarFile] = useState(null); // Файл нового аватара\n  const [uploadingAvatar, setUploadingAvatar] = useState(false); // Индикатор загрузки аватара\n  const [updateError, setUpdateError] = useState(''); // Ошибки при обновлении профиля/аватара\n\n  // Функция для загрузки данных профиля\n  const loadProfile = useCallback(async () => {\n    if (currentUser && currentUser.id) {\n      setPageLoading(true);\n      setError('');\n      try {\n        const data = await getUserProfile(); // getUserProfile из userService уже использует /me\n        setProfileData(data);\n      } catch (err) {\n        console.error(\"Failed to load profile:\", err);\n        setError(err.response?.data?.message || 'Failed to load profile data.');\n        setProfileData(null); // Сбрасываем данные профиля в случае ошибки\n      } finally {\n        setPageLoading(false);\n      }\n    } else if (!authLoading) { // Если authLoading завершен, а currentUser все еще нет\n      setError(\"User not authenticated or session expired.\");\n      setPageLoading(false);\n      setProfileData(null);\n    }\n    // Если authLoading еще true, ждем его завершения (useEffect ниже)\n  }, [currentUser, authLoading]); // Зависимости для useCallback\n\n  // Загрузка профиля при монтировании или изменении currentUser\n  useEffect(() => {\n    if (!authLoading) { // Загружаем профиль только после завершения проверки аутентификации\n        loadProfile();\n    }\n  }, [authLoading, loadProfile]); // Зависимость от loadProfile (которая стабильна из-за useCallback)\n\n  // Обработчик обновления данных профиля (никнейм, интересы)\n  const handleProfileUpdate = async (updateData) => {\n    if (!profileData) return;\n    setPageLoading(true); // Можно использовать отдельный стейт типа `updatingProfile`\n    setUpdateError('');\n    try {\n      const updatedProfile = await updateUserProfile(updateData); // updateUserProfile из userService уже использует /me\n      setProfileData(updatedProfile);\n      updateUserContext(updatedProfile); // Обновляем данные в AuthContext (ник, аватар и т.д.)\n      setEditMode(false); // Выходим из режима редактирования\n      alert('Profile updated successfully!'); // Простое уведомление\n    } catch (err) {\n      console.error(\"Failed to update profile:\", err);\n      setUpdateError(err.response?.data?.message || 'Failed to update profile.');\n    } finally {\n      setPageLoading(false);\n    }\n  };\n\n  // Обработчик выбора файла аватара\n  const handleAvatarFileChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      if (!file.type.startsWith('image/')) {\n        setUpdateError('Please select a valid image file (e.g., PNG, JPG, GIF).');\n        setAvatarFile(null);\n        e.target.value = null; // Сбрасываем input\n        return;\n      }\n      if (file.size > 5 * 1024 * 1024) { // Лимит 5MB для аватара\n        setUpdateError('Avatar file is too large. Maximum size is 5MB.');\n        setAvatarFile(null);\n        e.target.value = null; // Сбрасываем input\n        return;\n      }\n      setAvatarFile(file);\n      setUpdateError(''); // Сбрасываем ошибку, если была\n    }\n  };\n\n  // Обработчик загрузки нового аватара\n  const handleAvatarUpload = async () => {\n    if (!avatarFile || !profileData) return;\n    setUploadingAvatar(true);\n    setUpdateError('');\n    try {\n      const updatedProfile = await updateUserAvatarApi(avatarFile); // updateUserAvatarApi из userService уже использует /me\n      setProfileData(updatedProfile); // Обновляем локальные данные профиля\n      updateUserContext({ profilePictureUrl: updatedProfile.profilePictureUrl }); // Обновляем только URL аватара в AuthContext\n      setAvatarFile(null); // Сбрасываем выбранный файл\n      if (document.getElementById('avatar-upload-input')) { // Очищаем input file\n        document.getElementById('avatar-upload-input').value = null;\n      }\n      alert('Avatar updated successfully!');\n    } catch (err) {\n      console.error(\"Failed to upload avatar:\", err);\n      setUpdateError(err.response?.data?.message || 'Failed to upload avatar.');\n    } finally {\n      setUploadingAvatar(false);\n    }\n  };\n\n  // --- Рендеринг компонента ---\n\n  // Если authLoading (начальная проверка аутентификации) еще идет\n  if (authLoading) {\n    return <FullPageSpinner message=\"Loading session...\" />;\n  }\n\n  // Если pageLoading (загрузка данных профиля) еще идет, ИЛИ profileData еще не загружен\n  // (но authLoading уже завершен)\n  if (pageLoading || (!profileData && !error)) {\n    return <FullPageSpinner message=\"Loading profile...\" />;\n  }\n\n  // Если есть ошибка загрузки профиля ИЛИ profileData так и не был получен\n  if (error || !profileData) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Alert variant=\"danger\"> {/* Здесь Alert корректно закрыт */}\n          <h4>Error</h4>\n          <p>{error || \"Could not load profile data.\"}</p>\n          <Link to=\"/\">Go to Homepage</Link>\n        </Alert>\n      </Container>\n    );\n  }\n\n  // Если все успешно загружено, отображаем профиль\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col md={10} lg={8} xl={7}>\n          <Card className=\"p-3 p-md-4 shadow-sm\">\n            <Card.Title as=\"h2\" className=\"text-center mb-4\">\n              {editMode ? 'Edit Profile' : 'My Profile'}\n            </Card.Title>\n\n            {/* Общая ошибка обновления (если есть) */}\n            {updateError && <AlertMessage variant=\"danger\" message={updateError} onClose={() => setUpdateError('')} />}\n\n            {!editMode && (\n              <div className=\"text-center mb-4\">\n                <Image\n                  src={getFullImageUrl(profileData.profilePictureUrl) || defaultAvatar}\n                  alt={profileData.nickname}\n                  roundedCircle\n                  className=\"profile-avatar mb-3\" // Добавим класс для стилизации\n                  onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                />\n                <h4>{profileData.nickname}</h4>\n                <p className=\"text-muted\">Reputation: {profileData.reputation}</p>\n                <p className=\"text-muted small\">Member since: {new Date(profileData.createdAt).toLocaleDateString()}</p>\n\n                <Form.Group controlId=\"avatar-upload-input\" className=\"mt-3 mb-2\">\n                  <Form.Label visuallyHidden>Upload new avatar</Form.Label>\n                  <Form.Control type=\"file\" accept=\"image/*\" onChange={handleAvatarFileChange} size=\"sm\" disabled={uploadingAvatar} />\n                </Form.Group>\n                {avatarFile && (\n                  <Button onClick={handleAvatarUpload} disabled={uploadingAvatar} size=\"sm\" variant=\"info\">\n                    {uploadingAvatar ? (\n                      <>\n                        <Spinner as=\"span\" size=\"sm\" animation=\"border\" className=\"me-1\" /> Uploading...\n                      </>\n                    ) : (\n                      'Upload New Avatar'\n                    )}\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {editMode ? (\n              <ProfileEditForm\n                initialData={{\n                  nickname: profileData.nickname,\n                  interestIds: profileData.interests.map(i => i.id),\n                }}\n                onSubmit={handleProfileUpdate}\n                onCancel={() => { setEditMode(false); setUpdateError(''); }} // Сбрасываем ошибку при отмене\n                loading={pageLoading} // Используем pageLoading или отдельный стейт для формы\n                serverError={updateError} // Передаем ошибку обновления в форму\n              />\n            ) : (\n              <>\n                <hr />\n                <h5 className=\"mt-4 mb-3\">Interests:</h5>\n                {profileData.interests && profileData.interests.length > 0 ? (\n                  <Row xs={1} sm={2} md={3} className=\"g-2\">\n                    {profileData.interests.map(interest => (\n                      <Col key={interest.id}>\n                        <Badge pill bg=\"light\" text=\"dark\" className=\"p-2 w-100 text-truncate\">\n                          {interest.name}\n                        </Badge>\n                      </Col>\n                    ))}\n                  </Row>\n                ) : (\n                  <p className=\"text-muted\">You haven't selected any interests yet.</p>\n                )}\n                <Button variant=\"primary\" onClick={() => setEditMode(true)} className=\"w-100 mt-4\">\n                  Edit Profile and Interests\n                </Button>\n              </>\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ProfilePage;","import apiClient from './apiClient'; // Наш настроенный экземпляр Axios\n\n/**\n * Получает список всех доступных интересов.\n * @returns {Promise<Array<object>>} - Promise, который разрешается массивом объектов InterestDto.\n * Каждый объект InterestDto: { id, name, description }\n */\nexport const getAllInterests = async () => {\n  try {\n    const response = await apiClient.get('/interests');\n    return response.data; // Ожидаемый ответ: List<InterestDto>\n  } catch (error) {\n    console.error(\"Error fetching interests:\", error.response?.data || error.message);\n    // Возвращаем пустой массив в случае ошибки, чтобы UI не падал,\n    // или можно перебросить ошибку для обработки в компоненте.\n    // throw error;\n    return [];\n  }\n};\n\n// Если в будущем появится возможность создавать/редактировать интересы (для админа),\n// соответствующие функции можно будет добавить сюда.","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg = 'primary',\n  pill = false,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nexport default Badge;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst AlertMessage = ({\n  variant = 'danger', // Bootstrap варианты: primary, secondary, success, danger, warning, info, light, dark\n  message,            // Текст сообщения (может быть строкой или объектом ошибки)\n  show = true,        // Показать/скрыть алерт\n  onClose,            // Функция для кнопки закрытия (делает алерт dismissible)\n  className = \"mt-3\"  // Дополнительные классы\n}) => {\n  if (!show || !message) {\n    return null; // Не рендерить, если нечего показывать или show=false\n  }\n\n  let displayMessage = message;\n\n  // Пытаемся извлечь более читаемое сообщение, если message - это объект ошибки от Axios\n  if (typeof message === 'object' && message !== null) {\n    if (message.response && message.response.data) { // Ошибка Axios\n      if (typeof message.response.data.message === 'string') {\n        displayMessage = message.response.data.message;\n      } else if (typeof message.response.data === 'string') { // Иногда тело ответа просто строка\n        displayMessage = message.response.data;\n      } else if (message.response.data.errors) { // Ошибки валидации Spring\n        displayMessage = Object.values(message.response.data.errors).join('. ');\n      } else {\n        displayMessage = \"An unexpected error occurred. Please check console.\"; // Общее\n      }\n    } else if (message.message) { // Стандартное свойство Error.message\n      displayMessage = message.message;\n    } else {\n      try {\n        displayMessage = JSON.stringify(message); // В крайнем случае\n      } catch (e) {\n        displayMessage = \"An unreadable error object was received.\";\n      }\n    }\n  }\n\n  return (\n    <Alert\n      variant={variant}\n      onClose={onClose} // Если onClose передана, Alert будет dismissible\n      dismissible={!!onClose}\n      className={className}\n      role=\"alert\"\n    >\n      {/* Можно добавить заголовок Alert.Heading, если нужно */}\n      {/* <Alert.Heading>Oh snap! You got an error!</Alert.Heading> */}\n      {displayMessage}\n    </Alert>\n  );\n};\n\nexport default AlertMessage;"],"names":["_ref","initialData","onSubmit","onCancel","loading","serverError","nickname","setNickname","useState","selectedInterestIds","setSelectedInterestIds","Set","interestIds","availableInterests","setAvailableInterests","formError","setFormError","interestsLoading","setInterestsLoading","useEffect","async","interests","fetchAllInterestsApi","err","console","error","loadInterests","_jsxs","Form","e","preventDefault","trim","length","Array","from","children","_jsx","Alert","variant","size","className","FloatingLabel","controlId","label","Control","type","placeholder","value","onChange","target","required","disabled","minLength","maxLength","Group","Label","as","Spinner","animation","Card","Body","style","maxHeight","overflowY","Row","xs","md","map","interest","Col","Check","id","concat","name","checked","has","interestId","newSelectedIds","delete","add","handleInterestChange","Button","onClick","_Fragment","role","ProfilePage","currentUser","updateUserContext","authLoading","useAuth","profileData","setProfileData","pageLoading","setPageLoading","setError","editMode","setEditMode","avatarFile","setAvatarFile","uploadingAvatar","setUploadingAvatar","updateError","setUpdateError","loadProfile","useCallback","data","getUserProfile","_err$response","_err$response$data","response","message","FullPageSpinner","Container","Link","to","lg","xl","Title","AlertMessage","onClose","Image","src","getFullImageUrl","profilePictureUrl","defaultAvatar","alt","roundedCircle","onError","onerror","reputation","Date","createdAt","toLocaleDateString","visuallyHidden","accept","files","file","startsWith","updatedProfile","updateUserAvatarApi","document","getElementById","alert","_err$response3","_err$response3$data","ProfileEditForm","i","updateUserProfile","updateData","_err$response2","_err$response2$data","sm","Badge","pill","bg","text","getAllInterests","apiClient","get","_error$response","_excluded","React","ref","bsPrefix","Component","props","_objectWithoutProperties","prefix","useBootstrapPrefix","_objectSpread","classNames","displayName","show","displayMessage","errors","Object","values","join","JSON","stringify","dismissible"],"sourceRoot":""}