{"version":3,"file":"static/js/49.d4853a97.chunk.js","mappings":"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","sources":["services/chatService.js","components/chat/MessageList.js","components/chat/MessageInput.js","components/chat/ChatWindow.js","components/chat/ParticipantList.js","components/chat/ChatTimer.js","pages/ChatPage.js"],"sourcesContent":["import apiClient from './apiClient'; // Наш настроенный экземпляр Axios\n\n/**\n * Создает новый чат.\n * @param {object} chatCreateRequest - Данные для создания чата (ChatCreateRequest).\n * @param {string} [chatCreateRequest.chatName] - Название чата (опционально).\n * @param {number} chatCreateRequest.primaryInterestId - ID основного интереса чата.\n * @returns {Promise<object>} - Promise, который разрешается объектом ChatDto созданного чата.\n */\nexport const createNewChat = async (chatCreateRequest) => {\n  try {\n    const response = await apiClient.post('/chats', chatCreateRequest);\n    return response.data; // Ожидаемый ответ: ChatDto\n  } catch (error) {\n    console.error(\"Error creating new chat:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n/**\n * Присоединяется к случайному активному чату по указанному интересу.\n * @param {number} interestId - ID интереса.\n * @returns {Promise<object>} - Promise, который разрешается объектом ChatDto чата, к которому присоединился пользователь.\n */\nexport const joinChatByInterest = async (interestId) => {\n  try {\n    // Бэкенд ожидает POST /api/chats/join/{interestId}\n    const response = await apiClient.post(`/chats/join/${interestId}`);\n    return response.data; // Ожидаемый ответ: ChatDto\n  } catch (error) {\n    console.error(`Error joining chat for interest ID ${interestId}:`, error.response?.data || error.message);\n    throw error;\n  }\n};\n\n/**\n * Получает информацию о текущем активном чате пользователя.\n * @returns {Promise<object|null>} - Promise, который разрешается объектом ChatDto или null, если нет активного чата.\n */\nexport const getCurrentChat = async () => {\n  try {\n    const response = await apiClient.get('/chats/current');\n    // Бэкенд может вернуть 200 с ChatDto или 204 No Content, если чата нет\n    // Axios по умолчанию считает 204 успехом, response.data будет undefined или null.\n    // Мы можем явно проверить статус или просто вернуть response.data.\n    return response.data; // Если 204, data будет пустой.\n  } catch (error) {\n    // Если бэкенд возвращает 404, когда чата нет, это тоже нужно обработать.\n    if (error.response && (error.response.status === 404 || error.response.status === 204)) {\n      return null; // Нет активного чата\n    }\n    console.error(\"Error fetching current chat:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n/**\n * Получает детали конкретного чата по его ID.\n * (Может быть полезно, если навигация идет по /chat/:chatId)\n * @param {number} chatId - ID чата.\n * @returns {Promise<object>} - Promise, который разрешается объектом ChatDto.\n */\nexport const getChatDetails = async (chatId) => {\n    try {\n      const response = await apiClient.get(`/chats/${chatId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching details for chat ID ${chatId}:`, error.response?.data || error.message);\n      throw error;\n    }\n};\n\n\n/**\n * Загружает историю сообщений для указанного чата.\n * ВНИМАНИЕ: Бэкенд должен иметь соответствующий GET эндпоинт, например, /api/chats/{chatId}/messages\n * Если такого эндпоинта нет, эта функция не будет работать, и чат будет загружаться пустым\n * (сообщения будут появляться только через WebSocket).\n * @param {number} chatId - ID чата.\n * @returns {Promise<Array<object>>} - Promise, который разрешается массивом объектов MessageDto.\n */\nexport const getChatMessages = async (chatId) => {\n  try {\n    // Предполагаемый эндпоинт, который нужно реализовать на бэкенде\n    const response = await apiClient.get(`/chats/${chatId}/messages`);\n    return response.data; // Ожидаемый ответ: List<MessageDto>\n  } catch (error) {\n    console.warn(`Failed to fetch initial messages for chat ${chatId} via HTTP. This endpoint might not be implemented on the backend. Chat will rely on WebSocket for new messages.`, error.response?.data || error.message);\n    return []; // Возвращаем пустой массив, чтобы UI не падал\n  }\n};\n\n/**\n * Загружает изображение для сообщения в чате.\n * @param {number} chatId - ID чата.\n * @param {File} imageFile - Файл изображения.\n * @returns {Promise<object>} - Promise, который разрешается объектом MessageDto (с contentImageUrl).\n */\nexport const uploadChatImage = async (chatId, imageFile) => {\n  const formData = new FormData();\n  formData.append('file', imageFile); // 'file' - имя параметра на бэкенде\n\n  try {\n    // Бэкенд ожидает POST /api/chats/{chatId}/messages/image\n    const response = await apiClient.post(`/chats/${chatId}/messages/image`, formData, {\n      // 'Content-Type': 'multipart/form-data' axios установит автоматически для FormData\n    });\n    return response.data; // Ожидаемый ответ: MessageDto с заполненным contentImageUrl\n  } catch (error) {\n    console.error(`Error uploading image for chat ${chatId}:`, error.response?.data || error.message);\n    throw error;\n  }\n};\n\n/**\n * Позволяет текущему пользователю покинуть указанный чат.\n * @param {number} chatId - ID чата.\n * @returns {Promise<string>} - Promise, который разрешается сообщением об успехе.\n */\nexport const leaveChat = async (chatId) => {\n  try {\n    const response = await apiClient.post(`/chats/${chatId}/leave`);\n    return response.data; // Ожидаемый ответ: строка (например, \"Successfully left the chat.\")\n  } catch (error) {\n    console.error(`Error leaving chat ${chatId}:`, error.response?.data || error.message);\n    throw error;\n  }\n};","import React, { useRef, useEffect } from 'react';\nimport { ListGroup, Image, Figure } from 'react-bootstrap';\nimport { formatTimeAgo, getFullImageUrl, isMessageFromCurrentUser } from '../../utils/helpers'; // Вспомогательные функции\nimport defaultAvatar from '../../assets/images/default-avatar.png'; // Заглушка\n\nconst MessageList = ({ messages, currentUserNickname, currentUserId }) => { // Добавим currentUserId\n  const messagesEndRef = useRef(null); // Для автопрокрутки\n\n  // Функция для плавной прокрутки вниз\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Прокрутка при загрузке и при добавлении новых сообщений\n  useEffect(scrollToBottom, [messages]);\n\n  if (!messages || messages.length === 0) {\n    return <p className=\"text-center text-muted mt-4\">No messages yet. Start the conversation!</p>;\n  }\n\n  return (\n    <ListGroup variant=\"flush\" className=\"p-0\"> {/* Убираем стандартный padding ListGroup */}\n      {messages.map((msg, index) => {\n        // Определяем, является ли сообщение от текущего пользователя\n        // Предполагаем, что currentUserNickname и currentUserId передаются корректно\n        const isCurrentUserMsg = (currentUserNickname && msg.senderNickname === currentUserNickname) ||\n                               (currentUserId && msg.senderId === currentUserId);\n\n        const messageTime = formatTimeAgo(msg.sentAt); // Форматируем время\n\n        return (\n          <ListGroup.Item\n            key={msg.id || `msg-${index}`} // Используем msg.id, если он уникален\n            className={`d-flex flex-column ${isCurrentUserMsg ? 'align-items-end' : 'align-items-start'} mb-3 border-0 bg-transparent`}\n          >\n            <div\n                className={`message-bubble shadow-sm ${isCurrentUserMsg ? 'sent' : 'received'}`}\n            >\n              {/* Отображаем аватар и ник для чужих сообщений */}\n              {!isCurrentUserMsg && (\n                <div className=\"message-sender d-flex align-items-center\">\n                  <Image\n                    src={getFullImageUrl(msg.senderProfilePictureUrl) || defaultAvatar}\n                    alt={msg.senderNickname}\n                    roundedCircle\n                    width={24}\n                    height={24}\n                    className=\"me-2\"\n                    onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n                  />\n                  <span>{msg.senderNickname || 'Unknown User'}</span>\n                </div>\n              )}\n\n              {/* Тело сообщения */}\n              {msg.messageType === 'TEXT' && msg.contentText && (\n                <p className=\"mb-0\">{msg.contentText}</p>\n              )}\n              {msg.messageType === 'IMAGE' && msg.contentImageUrl && (\n                <Figure className=\"mb-1 mt-1\" style={{ maxWidth: '250px', cursor: 'pointer' }} onClick={() => window.open(getFullImageUrl(msg.contentImageUrl), '_blank')}>\n                  <Figure.Image\n                    src={getFullImageUrl(msg.contentImageUrl)}\n                    alt=\"Chat attachment\"\n                    fluid // Адаптивное изображение\n                    rounded\n                  />\n                  {/* Если есть текст к картинке (например, подпись) */}\n                  {msg.contentText && <Figure.Caption className={`small ${isCurrentUserMsg ? 'text-white-75' : 'text-muted'}`}>{msg.contentText}</Figure.Caption>}\n                </Figure>\n              )}\n\n              {/* Время отправки сообщения */}\n              <div className={`message-time text-end ${isCurrentUserMsg ? 'sent' : 'received'}`}>\n                {messageTime}\n              </div>\n            </div>\n          </ListGroup.Item>\n        );\n      })}\n      {/* Пустой div для автопрокрутки */}\n      <div ref={messagesEndRef} />\n    </ListGroup>\n  );\n};\n\nexport default MessageList;","import React, { useState, useRef } from 'react';\nimport { Form, Button, InputGroup, Spinner, Alert, Image } from 'react-bootstrap';\nimport { BsPaperclip, BsFillSendFill } from 'react-icons/bs'; // Иконки Bootstrap\nimport { uploadChatImage } from '../../services/chatService'; // Сервис для загрузки изображений\n\nconst MessageInput = ({ onSendMessage, chatId, chatIsActive }) => {\n  const [messageText, setMessageText] = useState('');\n  const [imageFile, setImageFile] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null); // Для превью выбранного изображения\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState('');\n  const fileInputRef = useRef(null); // Для программного клика по input[type=file] и его сброса\n\n  const handleTextSubmit = (e) => {\n    e.preventDefault();\n    if (!messageText.trim()) return; // Не отправлять пустое сообщение\n\n    onSendMessage(messageText.trim(), 'TEXT', null);\n    setMessageText(''); // Очистить поле ввода\n    setError('');      // Сбросить ошибку\n  };\n\n  const handleImageFileChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      // Проверка типа файла (опционально, но рекомендуется)\n      if (!file.type.startsWith('image/')) {\n        setError('Please select an image file (png, jpg, gif).');\n        setImageFile(null);\n        setImagePreview(null);\n        if (fileInputRef.current) fileInputRef.current.value = \"\";\n        return;\n      }\n      // Проверка размера файла (например, 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        setError('File is too large. Max 10MB allowed.');\n        setImageFile(null);\n        setImagePreview(null);\n        if (fileInputRef.current) fileInputRef.current.value = \"\";\n        return;\n      }\n      setImageFile(file);\n      setImagePreview(URL.createObjectURL(file)); // Создаем URL для превью\n      setError('');\n    }\n  };\n\n  const handleImageUploadAndSend = async () => {\n    if (!imageFile || !chatId) {\n      setError(\"Please select an image file first.\");\n      return;\n    }\n    setIsUploading(true);\n    setError('');\n    try {\n      // Шаг 1: Загружаем изображение на сервер через HTTP POST\n      const imageMessageDto = await uploadChatImage(chatId, imageFile);\n      // imageMessageDto от бэкенда должен содержать contentImageUrl и, возможно, contentText (если имя файла или др.)\n      if (imageMessageDto && imageMessageDto.contentImageUrl) {\n        // Шаг 2: Отправляем WebSocket сообщение с типом IMAGE и URL загруженного изображения\n        onSendMessage(imageMessageDto.contentText, 'IMAGE', imageMessageDto.contentImageUrl);\n      } else {\n        throw new Error(\"Image URL was not returned from the server after upload.\");\n      }\n      // Сброс после успешной отправки\n      setImageFile(null);\n      setImagePreview(null);\n      if (fileInputRef.current) fileInputRef.current.value = \"\";\n    } catch (err) {\n      console.error(\"Failed to upload and send image:\", err);\n      setError(err.response?.data?.message || \"Failed to process image. Please try again.\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  const removeImagePreview = () => {\n    setImageFile(null);\n    setImagePreview(null);\n    if (fileInputRef.current) fileInputRef.current.value = \"\";\n    setError('');\n  }\n\n  if (!chatIsActive) {\n    return null; // Не показывать инпут, если чат неактивен\n  }\n\n  return (\n    <div className=\"message-input-area p-2 border-top bg-light\">\n      {error && <Alert variant=\"danger\" size=\"sm\" className=\"mb-2 py-1\" onClose={() => setError('')} dismissible>{error}</Alert>}\n\n      {imagePreview && (\n        <div className=\"mb-2 position-relative\" style={{ maxWidth: '150px' }}>\n          <Image src={imagePreview} thumbnail fluid />\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={removeImagePreview}\n            disabled={isUploading}\n            className=\"position-absolute top-0 end-0 m-1\"\n            style={{ lineHeight: '0.8', padding: '0.2rem 0.4rem' }}\n            aria-label=\"Remove image\"\n          >\n            ×\n          </Button>\n        </div>\n      )}\n\n      <Form onSubmit={handleTextSubmit}>\n        <InputGroup>\n          {/* Скрытый input[type=file] */}\n          <Form.Control\n            type=\"file\"\n            id=\"chatImageUploadInput\"\n            accept=\"image/png, image/jpeg, image/gif\"\n            onChange={handleImageFileChange}\n            ref={fileInputRef}\n            style={{ display: 'none' }}\n            aria-label=\"Upload image file\"\n            disabled={isUploading}\n          />\n          {/* Кнопка для вызова скрытого input */}\n          <Button\n            variant=\"outline-secondary\"\n            onClick={triggerFileInput}\n            disabled={isUploading}\n            title=\"Attach image\"\n          >\n            <BsPaperclip /> {/* Или BsCardImage */}\n          </Button>\n\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={messageText}\n            onChange={(e) => setMessageText(e.target.value)}\n            aria-label=\"Message text\"\n            disabled={isUploading || !!imageFile} // Блокируем ввод текста, если выбрано изображение для загрузки\n            autoFocus\n          />\n\n          {imageFile ? (\n            <Button\n              variant=\"success\"\n              onClick={handleImageUploadAndSend}\n              disabled={isUploading || !imageFile}\n            >\n              {isUploading ? (\n                <>\n                  <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                  <span className=\"visually-hidden\">Uploading...</span>\n                </>\n              ) : (\n                <BsFillSendFill /> /* Иконка отправки для изображения */\n              )}\n            </Button>\n          ) : (\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={!messageText.trim() || isUploading}\n            >\n              <BsFillSendFill /> {/* Иконка отправки для текста */}\n            </Button>\n          )}\n        </InputGroup>\n      </Form>\n    </div>\n  );\n};\n\nexport default MessageInput;","import React from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Card } from 'react-bootstrap';\n\nconst ChatWindow = ({\n  messages,\n  currentUserNickname,\n  currentUserId, // Передаем ID текущего пользователя для MessageList\n  onSendMessage,\n  chatId,\n  chatIsActive\n}) => {\n  return (\n    <Card className=\"h-100 d-flex flex-column shadow-sm\">\n      {/* Заголовок чата лучше вынести на уровень ChatPage, чтобы он был над ChatWindow и ParticipantList */}\n      {/* <Card.Header>Chat Room Name</Card.Header> */}\n\n      {/* Область для отображения сообщений */}\n      <Card.Body className=\"flex-grow-1 overflow-auto p-0 message-list-container\"> {/* Убираем padding, т.к. он есть в MessageList */}\n        <MessageList\n          messages={messages}\n          currentUserNickname={currentUserNickname}\n          currentUserId={currentUserId}\n        />\n      </Card.Body>\n\n      {/* Область для ввода сообщения */}\n      {/* Показываем инпут, только если чат активен */}\n      {chatIsActive && (\n        <div className=\"message-input-form\"> {/* Этот div для MessageInput теперь в ChatWindow */}\n          <MessageInput\n            onSendMessage={onSendMessage}\n            chatId={chatId}\n            chatIsActive={chatIsActive} // Передаем для контроля активности инпута\n          />\n        </div>\n      )}\n       {!chatIsActive && (\n         <Card.Footer className=\"text-center text-muted p-3\">\n            This chat has ended. You can no longer send messages.\n         </Card.Footer>\n       )}\n    </Card>\n  );\n};\n\nexport default ChatWindow;","import React from 'react';\nimport { ListGroup, Image, Badge } from 'react-bootstrap';\nimport defaultAvatar from '../../assets/images/default-avatar.png'; // Заглушка для аватара\nimport { getFullImageUrl } from '../../utils/helpers'; // Вспомогательная функция для URL изображений\n\nconst ParticipantList = ({ participants, currentUserId }) => {\n  if (!participants || participants.length === 0) {\n    return <p className=\"text-muted p-3 text-center\">No participants yet.</p>;\n  }\n\n  return (\n    <div className=\"h-100 d-flex flex-column\"> {/* Для растягивания на всю высоту родителя */}\n      <h5 className=\"mb-2 text-center p-2 bg-light border-bottom\">\n        Participants <Badge pill bg=\"secondary\">{participants.length}</Badge>\n      </h5>\n      <ListGroup variant=\"flush\" className=\"flex-grow-1 overflow-auto\"> {/* Позволяет списку скроллиться */}\n        {participants.map((participant) => (\n          <ListGroup.Item\n            key={participant.userId}\n            className=\"d-flex align-items-center p-2 border-0\" // Убираем стандартные границы\n          >\n            <Image\n              src={getFullImageUrl(participant.profilePictureUrl) || defaultAvatar}\n              alt={participant.nickname}\n              roundedCircle\n              width={32} // Немного увеличим аватар\n              height={32}\n              className=\"me-2 border\" // Добавим легкую рамку\n              onError={(e) => { e.target.onerror = null; e.target.src = defaultAvatar; }}\n            />\n            <span className=\"flex-grow-1 text-truncate\" title={participant.nickname}> {/* Обрезание длинных ников */}\n              {participant.nickname}\n            </span>\n            {/* Пометка \"You\" для текущего пользователя */}\n            {participant.userId === currentUserId && (\n              <Badge pill bg=\"success\" text=\"white\" className=\"ms-auto\">\n                You\n              </Badge>\n            )}\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default ParticipantList;","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Badge } from 'react-bootstrap';\nimport { parseISO, differenceInSeconds } from 'date-fns'; // Библиотека для работы с датами\n\nconst ChatTimer = ({ expiryTimestamp, onChatExpired }) => {\n  // Используем useMemo, чтобы initialExpiryDate вычислялся только один раз при изменении expiryTimestamp\n  const initialExpiryDate = useMemo(() => {\n    if (!expiryTimestamp) return null;\n    try {\n      // Бэкенд обычно присылает дату в формате ISO (например, \"2024-05-26T12:00:00Z\")\n      return parseISO(expiryTimestamp);\n    } catch (e) {\n      console.error(\"Invalid expiry timestamp provided to ChatTimer:\", expiryTimestamp, e);\n      return null;\n    }\n  }, [expiryTimestamp]);\n\n  // useCallback для функции расчета оставшегося времени\n  const calculateTimeLeft = useCallback(() => {\n    if (!initialExpiryDate) return null;\n\n    const totalSeconds = differenceInSeconds(initialExpiryDate, new Date());\n\n    if (totalSeconds <= 0) {\n      return { total: 0, hours: 0, minutes: 0, seconds: 0 };\n    }\n\n    return {\n      total: totalSeconds,\n      hours: Math.floor(totalSeconds / 3600),\n      minutes: Math.floor((totalSeconds % 3600) / 60),\n      seconds: Math.floor(totalSeconds % 60),\n    };\n  }, [initialExpiryDate]); // Зависимость от initialExpiryDate\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n  useEffect(() => {\n    // Если дата окончания невалидна или время уже вышло, ничего не делаем\n    if (!initialExpiryDate || (timeLeft && timeLeft.total <= 0)) {\n      // Если время вышло и есть колбэк, вызываем его\n      if (timeLeft && timeLeft.total <= 0 && onChatExpired && typeof onChatExpired === 'function') {\n        onChatExpired();\n      }\n      return;\n    }\n\n    // Устанавливаем интервал для обновления таймера каждую секунду\n    const timerInterval = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    // Очищаем интервал при размонтировании компонента или когда время вышло\n    return () => clearInterval(timerInterval);\n  }, [timeLeft, initialExpiryDate, calculateTimeLeft, onChatExpired]); // Пересчитываем при изменении timeLeft или calculateTimeLeft\n\n  if (!timeLeft || !expiryTimestamp) {\n    return null; // Не рендерим таймер, если нет данных или даты\n  }\n\n  if (timeLeft.total <= 0) {\n    return <Badge bg=\"danger\">Chat Expired</Badge>;\n  }\n\n  // Форматируем вывод времени, добавляя ведущие нули\n  const formattedHours = String(timeLeft.hours).padStart(2, '0');\n  const formattedMinutes = String(timeLeft.minutes).padStart(2, '0');\n  const formattedSeconds = String(timeLeft.seconds).padStart(2, '0');\n\n  return (\n    <Badge bg=\"warning\" text=\"dark\" pill className=\"p-2\">\n      Time left: {formattedHours}:{formattedMinutes}:{formattedSeconds}\n    </Badge>\n  );\n};\n\nexport default ChatTimer;","// src/pages/ChatPage.js\n\n// ... (импорты остаются такими же)\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { Alert, Button, Col, Row, Container, Badge } from 'react-bootstrap';\nimport { useNavigate, Link, useParams, useLocation } from 'react-router-dom'; // Добавляем useLocation\nimport { useAuth } from '../hooks/useAuth';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport ChatWindow from '../components/chat/ChatWindow';\nimport ParticipantList from '../components/chat/ParticipantList';\nimport ChatTimer from '../components/chat/ChatTimer';\nimport {\n  getCurrentChat,\n  getChatDetails,\n  getChatMessages,\n  leaveChat as leaveChatApi\n} from '../services/chatService';\nimport { FullPageSpinner } from '../components/common/LoadingSpinner';\n\nconst ChatPage = () => {\n  const { currentUser, token, logout } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation(); // <--- Получаем location здесь\n  const { chatId: chatIdFromUrl } = useParams();\n\n  // ... (стейты остаются такими же)\n  const [chatDetails, setChatDetails] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [connecting, setConnecting] = useState(false);\n  const [isWsConnected, setIsWsConnected] = useState(false);\n\n  const stompClientRef = useRef(null);\n  const chatExpiredRef = useRef(false);\n\n  // Сохраняем navigate и location в ref, чтобы иметь доступ к актуальным значениям в колбэках\n  const navigateRef = useRef(navigate);\n  const locationRef = useRef(location);\n\n  // Обновляем ref при изменении navigate или location (хотя navigate обычно стабилен)\n  useEffect(() => {\n    navigateRef.current = navigate;\n  }, [navigate]);\n\n  useEffect(() => {\n    locationRef.current = location;\n  }, [location]);\n\n\n  const fetchChatData = useCallback(async () => {\n    // ... (код fetchChatData без изменений)\n    if (!currentUser) {\n      // Используем navigateRef.current\n      navigateRef.current('/login', { state: { from: { pathname: `/chat${chatIdFromUrl ? `/${chatIdFromUrl}` : ''}` } } });\n      return;\n    }\n    setLoading(true);\n    setError('');\n    chatExpiredRef.current = false;\n\n    try {\n      let currentChat;\n      if (chatIdFromUrl) {\n        currentChat = await getChatDetails(chatIdFromUrl);\n      } else {\n        currentChat = await getCurrentChat();\n      }\n\n      if (!currentChat || !currentChat.active) {\n        setError(currentChat && !currentChat.active ? 'Your chat has expired or is no longer active.' : 'No active chat found.');\n        setChatDetails(null);\n        setTimeout(() => navigateRef.current('/'), 3000);\n        return;\n      }\n      setChatDetails(currentChat);\n      const chatMessages = await getChatMessages(currentChat.id);\n      setMessages(chatMessages || []);\n    } catch (err) {\n      console.error(\"Failed to fetch chat data:\", err);\n      setError(err.response?.data?.message || 'Failed to load chat data.');\n      setChatDetails(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [currentUser, chatIdFromUrl]);\n\n  useEffect(() => {\n    fetchChatData();\n  }, [fetchChatData]);\n\n\n  // Эффект для WebSocket\n  useEffect(() => {\n    if (!chatDetails || !chatDetails.active || !token || chatExpiredRef.current) {\n      if (stompClientRef.current && stompClientRef.current.active) {\n        stompClientRef.current.deactivate();\n      }\n      return;\n    }\n    if (stompClientRef.current && stompClientRef.current.active) return;\n\n    setConnecting(true);\n    const client = new Client({\n      brokerURL: process.env.REACT_APP_WS_BASE_URL.replace('http', 'ws'),\n      connectHeaders: { Authorization: `Bearer ${token}` },\n      webSocketFactory: () => new SockJS(process.env.REACT_APP_WS_BASE_URL),\n      debug: (str) => console.log('STOMP DEBUG: ' + str),\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000,\n    });\n\n    client.onConnect = (frame) => {\n      // ... (код onConnect без изменений)\n      setConnecting(false);\n      setIsWsConnected(true);\n      console.log('STOMP: Connected to WebSocket:', frame);\n      client.subscribe(`/topic/chat/${chatDetails.id}`, (message) => {\n        try {\n          const receivedMessage = JSON.parse(message.body);\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\n        } catch (e) {\n          console.error(\"STOMP: Error parsing message body:\", e, message.body);\n        }\n      });\n      client.subscribe(`/user/queue/errors`, (message) => {\n        console.error(\"STOMP: Received error from server via WebSocket:\", message.body);\n        setError(`Chat Error: ${message.body}`);\n      });\n    };\n\n    client.onStompError = (frame) => {\n      setConnecting(false);\n      setIsWsConnected(false);\n      const errorMessage = frame.headers['message'] || 'Broker error';\n      console.error('STOMP: Broker reported error: ' + errorMessage);\n      console.error('STOMP: Additional details: ' + frame.body);\n      setError('WebSocket connection error: ' + errorMessage);\n\n      // ИСПРАВЛЕНИЕ: Используем navigateRef.current и locationRef.current\n      if (errorMessage?.includes('AccessDeniedException') || errorMessage?.includes('401')) {\n        logout(); // logout из useAuth (он useCallback, так что стабилен)\n        // Используем актуальные значения navigate и location из ref\n        navigateRef.current('/login', {\n          state: { from: locationRef.current, error: 'Session expired or invalid.' },\n          replace: true // Важно для предотвращения возврата на страницу чата\n        });\n      }\n    };\n\n    client.onWebSocketError = (errorEvent) => {\n      // ... (код onWebSocketError без изменений)\n      setConnecting(false);\n      setIsWsConnected(false);\n      console.error('STOMP: WebSocket transport error:', errorEvent);\n      if (!chatExpiredRef.current) {\n        setError('WebSocket connection lost. Attempting to reconnect...');\n      }\n    };\n\n    client.onDisconnect = () => {\n      // ... (код onDisconnect без изменений)\n      setConnecting(false);\n      setIsWsConnected(false);\n      console.log(\"STOMP: Disconnected from WebSocket\");\n    };\n\n    stompClientRef.current = client;\n    client.activate();\n\n    return () => {\n      if (stompClientRef.current && stompClientRef.current.active) {\n        stompClientRef.current.deactivate();\n        stompClientRef.current = null; // Важно сбросить ref\n        setIsWsConnected(false);\n      }\n    };\n  // Добавляем logout в зависимости, так как он используется в onStompError\n  // logout сам по себе стабилен благодаря useCallback в AuthContext\n  }, [chatDetails, token, logout]); // Удаляем navigate из зависимостей WebSocket, так как он теперь в ref\n\n\n  const handleSendMessage = (messageText, messageType = 'TEXT', imageUrl = null) => {\n    // ... (код handleSendMessage без изменений)\n    if (stompClientRef.current && stompClientRef.current.connected && chatDetails && chatDetails.active) {\n      const chatMessagePayload = {\n        messageType: messageType,\n        contentText: messageType === 'TEXT' ? messageText : null,\n        contentImageUrl: messageType === 'IMAGE' ? imageUrl : null,\n      };\n      try {\n        stompClientRef.current.publish({\n          destination: `/app/chat/${chatDetails.id}/send`,\n          body: JSON.stringify(chatMessagePayload),\n        });\n      } catch (e) {\n        console.error(\"STOMP: Failed to publish message:\", e);\n        setError(\"Failed to send message. Connection issue?\");\n      }\n    } else {\n      setError('Not connected to chat or chat is inactive.');\n    }\n  };\n\n  const handleLeaveChat = async () => {\n    // ... (код handleLeaveChat)\n    if (!chatDetails) return;\n    setLoading(true);\n    try {\n      await leaveChatApi(chatDetails.id);\n      if (stompClientRef.current && stompClientRef.current.active) {\n        stompClientRef.current.deactivate();\n      }\n      navigateRef.current('/'); // Используем navigateRef\n    } catch (err) {\n      console.error(\"Failed to leave chat:\", err);\n      setError(err.response?.data?.message || \"Error leaving chat.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChatExpired = useCallback(() => {\n    // ... (код handleChatExpired)\n    setError('This chat has expired.');\n    setChatDetails(prev => prev ? { ...prev, active: false } : null);\n    chatExpiredRef.current = true;\n    if (stompClientRef.current && stompClientRef.current.active) {\n      stompClientRef.current.deactivate();\n    }\n  }, []); // navigate убран из зависимостей, если не используется здесь напрямую\n\n\n  // --- Рендеринг компонента ---\n  // ... (JSX без изменений, но при редиректах из ошибок можно тоже использовать navigateRef.current)\n  if (loading) {\n    return <FullPageSpinner message=\"Loading chat...\" />;\n  }\n\n  if (error && !chatDetails) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Alert variant=\"danger\">\n          <h4>Error Loading Chat</h4>\n          <p>{error}</p>\n          <Button as={Link} to=\"/\" variant=\"primary\">Go to Homepage</Button>\n        </Alert>\n      </Container>\n    );\n  }\n\n  if (!chatDetails) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Alert variant=\"info\">\n          No active chat found.\n          <div className=\"mt-3\">\n            <Button as={Link} to=\"/\" variant=\"outline-primary\">Find or Create a New Chat</Button>\n          </div>\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container fluid className=\"d-flex flex-column p-0\" style={{ height: 'calc(100vh - 56px - 1rem)' }}>\n      {error && !chatDetails.active && <Alert variant=\"danger\" className=\"m-2\" onClose={() => setError('')} dismissible>{error}</Alert>}\n      {connecting && <Alert variant=\"info\" className=\"m-2 text-center\">Connecting to chat server...</Alert>}\n      {!isWsConnected && chatDetails.active && !connecting && <Alert variant=\"warning\" className=\"m-2 text-center\">Disconnected. Attempting to reconnect...</Alert>}\n\n      <Row className=\"g-0 p-2 align-items-center border-bottom bg-light sticky-top\" style={{top: '56px', zIndex: 1000}}>\n        <Col>\n          <h4 className=\"mb-0 text-truncate\" title={chatDetails.chatName}>{chatDetails.chatName}</h4>\n          <small className=\"text-muted\">Interest: {chatDetails.primaryInterestName}</small>\n        </Col>\n        <Col md=\"auto\" className=\"text-center mx-2\">\n          {chatDetails.expiresAt && chatDetails.active && (\n            <ChatTimer\n              expiryTimestamp={chatDetails.expiresAt}\n              onChatExpired={handleChatExpired}\n            />\n          )}\n          {!chatDetails.active && <Badge bg=\"secondary\">Chat Inactive</Badge>}\n        </Col>\n        <Col md=\"auto\">\n          <Button variant=\"outline-danger\" size=\"sm\" onClick={handleLeaveChat} disabled={loading}>\n            Leave Chat\n          </Button>\n        </Col>\n      </Row>\n\n      <Row className=\"g-0 flex-grow-1\" style={{ overflow: 'hidden' }}>\n        <Col xs={12} md={8} lg={9} className=\"d-flex flex-column p-0 border-end\">\n          <ChatWindow\n            messages={messages}\n            currentUserNickname={currentUser?.nickname}\n            currentUserId={currentUser?.id}\n            onSendMessage={handleSendMessage}\n            chatId={chatDetails.id}\n            chatIsActive={chatDetails.active && isWsConnected}\n          />\n        </Col>\n        <Col md={4} lg={3} className=\"d-none d-md-block participant-list-col h-100 overflow-auto bg-light\">\n          <ParticipantList\n            participants={chatDetails.participants || []}\n            currentUserId={currentUser?.id}\n          />\n        </Col>\n      </Row>\n      <Row className=\"g-0 d-md-none mt-2 border-top\">\n        <Col xs={12} className=\"participant-list-col-mobile p-2 bg-light\" style={{maxHeight: '200px', overflowY: 'auto'}}>\n             <ParticipantList\n                participants={chatDetails.participants || []}\n                currentUserId={currentUser?.id}\n              />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ChatPage;"],"names":["createNewChat","async","apiClient","post","chatCreateRequest","data","error","_error$response","console","response","message","joinChatByInterest","concat","interestId","_error$response2","getCurrentChat","get","_error$response3","status","getChatDetails","chatId","_error$response4","getChatMessages","_error$response5","warn","uploadChatImage","imageFile","formData","FormData","append","_error$response6","leaveChat","_error$response7","_ref","messages","currentUserNickname","currentUserId","messagesEndRef","useRef","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","length","_jsxs","ListGroup","variant","className","children","map","msg","index","isCurrentUserMsg","senderNickname","senderId","messageTime","formatTimeAgo","sentAt","_jsx","Item","Image","src","getFullImageUrl","senderProfilePictureUrl","defaultAvatar","alt","roundedCircle","width","height","onError","e","target","onerror","messageType","contentText","contentImageUrl","Figure","style","maxWidth","cursor","onClick","window","open","fluid","rounded","Caption","id","ref","onSendMessage","chatIsActive","messageText","setMessageText","useState","setImageFile","imagePreview","setImagePreview","isUploading","setIsUploading","setError","fileInputRef","Alert","size","onClose","dismissible","thumbnail","Button","removeImagePreview","value","disabled","lineHeight","padding","Form","onSubmit","preventDefault","trim","InputGroup","Control","type","accept","onChange","files","file","startsWith","URL","createObjectURL","display","triggerFileInput","_fileInputRef$current","click","title","BsPaperclip","placeholder","autoFocus","imageMessageDto","Error","err","_err$response","_err$response$data","_Fragment","Spinner","as","animation","role","BsFillSendFill","Card","Body","MessageList","MessageInput","Footer","participants","Badge","pill","bg","participant","profilePictureUrl","nickname","userId","text","expiryTimestamp","onChatExpired","initialExpiryDate","useMemo","parseISO","calculateTimeLeft","useCallback","totalSeconds","differenceInSeconds","Date","total","hours","minutes","seconds","Math","floor","timeLeft","setTimeLeft","timerInterval","setInterval","clearInterval","formattedHours","String","padStart","formattedMinutes","formattedSeconds","ChatPage","currentUser","token","logout","useAuth","navigate","useNavigate","location","useLocation","chatIdFromUrl","useParams","chatDetails","setChatDetails","setMessages","loading","setLoading","connecting","setConnecting","isWsConnected","setIsWsConnected","stompClientRef","chatExpiredRef","navigateRef","locationRef","fetchChatData","currentChat","active","setTimeout","chatMessages","state","from","pathname","deactivate","client","Client","brokerURL","process","REACT_APP_WS_BASE_URL","replace","connectHeaders","Authorization","webSocketFactory","SockJS","debug","str","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","receivedMessage","JSON","parse","body","prevMessages","onStompError","errorMessage","headers","includes","onWebSocketError","errorEvent","onDisconnect","activate","handleChatExpired","prev","_objectSpread","FullPageSpinner","Container","Link","to","Row","top","zIndex","Col","chatName","primaryInterestName","md","expiresAt","ChatTimer","leaveChatApi","_err$response2","_err$response2$data","overflow","xs","lg","ChatWindow","arguments","undefined","imageUrl","connected","chatMessagePayload","publish","destination","stringify","ParticipantList","maxHeight","overflowY"],"sourceRoot":""}