{"version":3,"file":"static/js/144.2feeead4.chunk.js","mappings":"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","sources":["components/auth/LoginForm.js","pages/LoginPage.js","services/authService.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\nimport { loginUser as apiLoginUser } from '../../services/authService'; // Переименуем, чтобы не конфликтовать с login из useAuth\nimport { Form, Button, Alert, Spinner, FloatingLabel } from 'react-bootstrap';\n\nconst LoginForm = () => {\n  const [nickname, setNickname] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false); // Локальный loading для самой формы\n\n  const { login } = useAuth(); // Функция login из AuthContext\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from?.pathname || \"/\";\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      const responseData = await apiLoginUser({ nickname, password }); // Вызов API\n\n      if (responseData && responseData.accessToken) {\n        // Вызываем login из AuthContext и дожидаемся его выполнения\n        // login теперь возвращает Promise, который разрешается данными пользователя или null\n        const loggedInUser = await login(responseData.accessToken);\n\n        if (loggedInUser) {\n          navigate(from, { replace: true }); // Перенаправляем после успешного логина и загрузки пользователя\n        } else {\n          // Это может случиться, если токен получен, но fetchCurrentUserDetails не смог загрузить пользователя\n          setError('Login succeeded, but failed to retrieve user details. Please try again.');\n          // logout() здесь может быть вызван автоматически в AuthContext, если fetchCurrentUserDetails упал\n        }\n      } else {\n        setError('Login successful, but no token received. Please contact support.');\n      }\n    } catch (err) {\n      console.error(\"Login attempt failed:\", err);\n      const errorMessage = err.response?.data?.message || err.message || 'Login failed. Please check your nickname and password.';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {error && <Alert variant=\"danger\" className=\"mb-3 py-2\">{error}</Alert>}\n      <FloatingLabel controlId=\"loginNickname\" label=\"Nickname\" className=\"mb-3\">\n        <Form.Control\n          type=\"text\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          required\n          placeholder=\"Enter your nickname\"\n          disabled={loading}\n          autoFocus\n        />\n      </FloatingLabel>\n      <FloatingLabel controlId=\"loginPassword\" label=\"Password\" className=\"mb-3\">\n        <Form.Control\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          placeholder=\"Enter your password\"\n          disabled={loading}\n          autoComplete=\"current-password\"\n        />\n      </FloatingLabel>\n      <Button variant=\"primary\" type=\"submit\" className=\"w-100\" disabled={loading}>\n        {loading ? (\n          <>\n            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" className=\"me-2\"/>\n            Logging in...\n          </>\n        ) : (\n          'Login'\n        )}\n      </Button>\n    </Form>\n  );\n};\n\nexport default LoginForm;","import React from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport LoginForm from '../components/auth/LoginForm'; // Предполагается, что LoginForm.js существует\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\nimport { useAuth } from '../hooks/useAuth'; // Предполагается, что useAuth.js существует\n\nconst LoginPage = () => {\n  const { currentUser, loading } = useAuth();\n\n  if (loading) {\n    return (\n        <div className=\"text-center mt-5\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n        </div>\n    ); // Или ваш компонент LoadingSpinner\n  }\n\n  if (currentUser) {\n    return <Navigate to=\"/\" replace />; // Если пользователь уже залогинен, перенаправляем на главную\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center\">\n        <Col md={6} lg={5} xl={4}>\n          <Card className=\"p-4 shadow\">\n            <Card.Body>\n              <h2 className=\"text-center mb-4 fw-bold\">Login</h2>\n              <LoginForm />\n              <div className=\"mt-3 text-center\">\n                Don't have an account? <Link to=\"/register\">Register here</Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import apiClient from './apiClient'; // Наш настроенный экземпляр Axios\n\n/**\n * Отправляет запрос на вход пользователя.\n * @param {object} credentials - Объект с никнеймом и паролем.\n * @param {string} credentials.nickname - Никнейм пользователя.\n * @param {string} credentials.password - Пароль пользователя.\n * @returns {Promise<object>} - Promise, который разрешается объектом ответа от сервера (ожидается { accessToken, tokenType }).\n */\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await apiClient.post('/auth/login', credentials);\n    // Бэкенд должен вернуть объект вида:\n    // { \"accessToken\": \"your_jwt_token_here\", \"tokenType\": \"Bearer\" }\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during login:\", error.response?.data || error.message);\n    // Перебрасываем ошибку, чтобы ее можно было обработать в компоненте\n    throw error;\n  }\n};\n\n/**\n * Отправляет запрос на регистрацию нового пользователя.\n * @param {object} userData - Объект с данными для регистрации.\n * @param {string} userData.nickname - Никнейм нового пользователя.\n * @param {string} userData.password - Пароль нового пользователя.\n * @returns {Promise<string>} - Promise, который разрешается сообщением об успехе от сервера (строка).\n */\nexport const registerUser = async (userData) => {\n  try {\n    const response = await apiClient.post('/auth/register', userData);\n    // Бэкенд должен вернуть сообщение, например: \"User registered successfully!\"\n    return response.data; // Обычно это строка\n  } catch (error) {\n    console.error(\"Error during registration:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n// Можно добавить другие функции, связанные с аутентификацией, если они появятся\n// например, forgotPassword, resetPassword, refreshToken и т.д."],"names":["LoginForm","_location$state","_location$state$from","nickname","setNickname","useState","password","setPassword","error","setError","loading","setLoading","login","useAuth","navigate","useNavigate","from","useLocation","state","pathname","_jsxs","Form","onSubmit","async","e","preventDefault","responseData","apiLoginUser","accessToken","replace","err","_err$response","_err$response$data","console","errorMessage","response","data","message","children","_jsx","Alert","variant","className","FloatingLabel","controlId","label","Control","type","value","onChange","target","required","placeholder","disabled","autoFocus","autoComplete","Button","_Fragment","Spinner","as","animation","size","role","LoginPage","currentUser","Navigate","to","Container","Row","Col","md","lg","xl","Card","Body","Link","loginUser","apiClient","post","credentials","_error$response","registerUser","userData","_error$response2"],"sourceRoot":""}