{"version":3,"file":"static/js/139.e4dfce98.chunk.js","mappings":"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","sources":["components/auth/RegisterForm.js","pages/RegisterPage.js","services/authService.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { registerUser } from '../../services/authService'; // Предполагается, что authService.js существует\nimport { Form, Button, Alert, Spinner, FloatingLabel } from 'react-bootstrap'; // Компоненты React Bootstrap\n\nconst RegisterForm = () => {\n  const [nickname, setNickname] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match.\");\n      return;\n    }\n    if (password.length < 6) {\n      setError(\"Password must be at least 6 characters long.\");\n      return;\n    }\n    if (nickname.length < 3) {\n      setError(\"Nickname must be at least 3 characters long.\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const responseMessage = await registerUser({ nickname, password });\n      setSuccess(responseMessage + \" You can now log in.\");\n      setNickname('');\n      setPassword('');\n      setConfirmPassword('');\n      setTimeout(() => {\n        navigate('/login');\n      }, 3000);\n    } catch (err) {\n      console.error(\"Registration attempt failed:\", err);\n      const errorMessage = err.response?.data?.message || err.message || 'Registration failed. Please try a different nickname or try again later.';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Весь JSX должен быть обернут в один родительский элемент.\n  // В данном случае, <Form> является этим родительским элементом.\n  return (\n    <Form onSubmit={handleSubmit}> {/* <--- Родительский элемент */}\n      {error && <Alert variant=\"danger\" className=\"mb-3 py-2\">{error}</Alert>}\n      {success && <Alert variant=\"success\" className=\"mb-3 py-2\">{success}</Alert>}\n\n      <FloatingLabel\n        controlId=\"registerNickname\"\n        label=\"Nickname\"\n        className=\"mb-3\"\n      >\n        <Form.Control\n          type=\"text\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          required\n          placeholder=\"Choose a nickname\" // Этот placeholder для FloatingLabel\n          disabled={loading}\n          autoFocus\n        />\n      </FloatingLabel>\n\n      <FloatingLabel\n        controlId=\"registerPassword\"\n        label=\"Password (min. 6 characters)\"\n        className=\"mb-3\"\n      >\n        <Form.Control\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n          placeholder=\"Create a password\" // Этот placeholder для FloatingLabel\n          minLength={6}\n          disabled={loading}\n          autoComplete=\"new-password\"\n        />\n      </FloatingLabel>\n\n      <FloatingLabel\n        controlId=\"registerConfirmPassword\"\n        label=\"Confirm Password\"\n        className=\"mb-3\"\n      >\n        <Form.Control\n          type=\"password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          required\n          placeholder=\"Confirm your password\" // Этот placeholder для FloatingLabel\n          disabled={loading}\n          autoComplete=\"new-password\"\n        />\n      </FloatingLabel>\n\n      <Button variant=\"primary\" type=\"submit\" className=\"w-100\" disabled={loading}>\n        {loading ? (\n          <>\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className=\"me-2\"\n            />\n            Registering...\n          </>\n        ) : (\n          'Register'\n        )}\n      </Button>\n    </Form> // <--- Закрытие родительского элемента\n  );\n};\n\nexport default RegisterForm;","import React from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport RegisterForm from '../components/auth/RegisterForm'; // Предполагается, что RegisterForm.js существует\nimport { Spinner, Container, Row, Col, Card } from 'react-bootstrap';\nimport { useAuth } from '../hooks/useAuth'; // Предполагается, что useAuth.js существует\n\nconst RegisterPage = () => {\n  const { currentUser, loading } = useAuth();\n\n  if (loading) {\n     return (\n        <div className=\"text-center mt-5\">\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n        </div>\n    );\n  }\n\n  if (currentUser) {\n    return <Navigate to=\"/\" replace />; // Если пользователь уже залогинен, перенаправляем на главную\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center\">\n        <Col md={6} lg={5} xl={4}>\n          <Card className=\"p-4 shadow\">\n            <Card.Body>\n              <h2 className=\"text-center mb-4 fw-bold\">Register</h2>\n              <RegisterForm />\n              <div className=\"mt-3 text-center\">\n                Already have an account? <Link to=\"/login\">Login here</Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default RegisterPage;","import apiClient from './apiClient'; // Наш настроенный экземпляр Axios\n\n/**\n * Отправляет запрос на вход пользователя.\n * @param {object} credentials - Объект с никнеймом и паролем.\n * @param {string} credentials.nickname - Никнейм пользователя.\n * @param {string} credentials.password - Пароль пользователя.\n * @returns {Promise<object>} - Promise, который разрешается объектом ответа от сервера (ожидается { accessToken, tokenType }).\n */\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await apiClient.post('/auth/login', credentials);\n    // Бэкенд должен вернуть объект вида:\n    // { \"accessToken\": \"your_jwt_token_here\", \"tokenType\": \"Bearer\" }\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during login:\", error.response?.data || error.message);\n    // Перебрасываем ошибку, чтобы ее можно было обработать в компоненте\n    throw error;\n  }\n};\n\n/**\n * Отправляет запрос на регистрацию нового пользователя.\n * @param {object} userData - Объект с данными для регистрации.\n * @param {string} userData.nickname - Никнейм нового пользователя.\n * @param {string} userData.password - Пароль нового пользователя.\n * @returns {Promise<string>} - Promise, который разрешается сообщением об успехе от сервера (строка).\n */\nexport const registerUser = async (userData) => {\n  try {\n    const response = await apiClient.post('/auth/register', userData);\n    // Бэкенд должен вернуть сообщение, например: \"User registered successfully!\"\n    return response.data; // Обычно это строка\n  } catch (error) {\n    console.error(\"Error during registration:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n// Можно добавить другие функции, связанные с аутентификацией, если они появятся\n// например, forgotPassword, resetPassword, refreshToken и т.д."],"names":["RegisterForm","nickname","setNickname","useState","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","loading","setLoading","navigate","useNavigate","_jsxs","Form","onSubmit","async","e","preventDefault","length","responseMessage","registerUser","setTimeout","err","_err$response","_err$response$data","console","errorMessage","response","data","message","children","_jsx","Alert","variant","className","FloatingLabel","controlId","label","Control","type","value","onChange","target","required","placeholder","disabled","autoFocus","minLength","autoComplete","Button","_Fragment","Spinner","as","animation","size","role","RegisterPage","currentUser","useAuth","Navigate","to","replace","Container","Row","Col","md","lg","xl","Card","Body","Link","loginUser","apiClient","post","credentials","_error$response","userData","_error$response2"],"sourceRoot":""}